import threading
import queue
import time
import random

image_queue = queue.Queue()  #cola sin l√≠mite de tama√±o
lock = threading.Lock()
semaphore = threading.Semaphore(1)

class Image:
    def __init__(self, id):
        self.name = f"Imagen_{id}"

    def __repr__(self):
        return self.name

def producer():
    #Genera im√°genes de forma continua con llegada aleatoria
    image_id = 1

    while True:
        num_images = int(input("Introduce cu√°ntas im√°genes van a llegar al sat√©lite: "))

        for _ in range(num_images):
            new_image = Image(image_id)

            with lock:
                image_queue.put(new_image, block=True)
                print(f"[üì•] Imagen recibida: {new_image}")

            image_id += 1
            time.sleep(random.uniform(0.5, 2))

def consumer():
    while True:
        image = image_queue.get(block=True)
        print(f"[‚öôÔ∏è] Procesando {image}... ‚è≥")
        time.sleep(random.uniform(2, 5))
        print(f"[‚úÖ] Imagen procesada: {image}")

#creaci√≥n de hilos
producer_thread = threading.Thread(target=producer)
consumer_thread = threading.Thread(target=consumer)

producer_thread.start()
consumer_thread.start()

producer_thread.join()
consumer_thread.join()



"""En este c√≥digo, la cola (queue.Queue()) no tiene l√≠mite de tama√±o, 
lo que significa que puede almacenar una cantidad ilimitada de im√°genes. 
Esto puede causar problemas de memoria si el productor es mucho m√°s r√°pido que el consumidor.
Solucion : Si el n√∫mero de im√°genes es demasiado alto, se deber√≠a definir un tama√±o m√°ximo para la cola.
usando q.put, las imagenes esperarian antes de entrar en el buffer. 
No he querido ponerlo porque no lo explique en mi texto en el examen"""